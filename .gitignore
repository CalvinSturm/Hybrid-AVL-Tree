package cis233.a1;

import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import weiss.util.Stack;
import weiss.nonstandard.UnderflowException;
import weiss.util.ArrayList;
import weiss.util.NoSuchElementException;

public class A1233CSAVL<AnyType extends Comparable<? super AnyType>> {   
   
    private A1233CSAVLNode<AnyType> root;
    private static final int ALLOWED_IMBALANCE = 1;
   
    public A1233CSAVL( ) {
        
        root = null;
    }
    
    public void insert( AnyType x ) {
       
        root = insert( x, root );
    }

    public void remove( AnyType x ) {
        
        root = remove( x, root );
    }

    private A1233CSAVLNode<AnyType> remove( AnyType x, A1233CSAVLNode<AnyType> t ) {
        
        if( t == null )
            return t;   
            
        int compareResult = x.compareTo( t.element );
            
        if( compareResult < 0 )
            t.left = remove( x, t.left );
        else if( compareResult > 0 )
            t.right = remove( x, t.right );
        else            
             t.isActive = false; //mark boolean false for deletion
        
        return balance( t );
    }
   
    public AnyType findMin( ) {
        
        if( isEmpty( )) {    
            throw new UnderflowException("Tree empty! No min found.");
        }
        
        return findMin( root ).element;
    }

    public AnyType findMax( ) {
        
        if( isEmpty( ) ) {             
            throw new UnderflowException("Tree empty! No max found.");
        }
            
        return findMax( root ).element;
    }

    public boolean contains( AnyType x ) {
        
        return contains( x, root );
    }

    public void makeEmpty( ) {
        
        root = null;
    }

    public boolean isEmpty( ) {
        
        return root == null;
    }

    public void printTree( ) {
        
        if( isEmpty( ) )
            System.out.println( "Empty tree" );
        else
            printTree( root );
    }
    
    public void printBalTree(boolean x) {
        
        if( isEmpty() )
            System.out.println("Empty tree");
        else
            
            printBalTree(root, x);    
    }
    
    public void writeBalTree(boolean x) {
        
        if( isEmpty() )
            System.out.println("Empty tree");
        else {             
            PrintWriter fileOut = null;
            try {
                fileOut = new PrintWriter(new FileWriter("A1233CSAVLout.txt"));
                               
                 writeBalTree(root, x, fileOut);
                
            }
            catch(IOException ex) {
                new FileNotFoundException("File error");
            }
            finally {
                fileOut.close();
                    
            }
        }                        
    }
        
    private void printBalTree(A1233CSAVLNode<AnyType> t, boolean x) {
                
        if(x) {
            if( t != null ) {                   
                printBalTree( t.left , x );            
                System.out.print( "\nData: " + t.element );
                System.out.print("      Height: " + t.height);
                System.out.print("  Balance: " + checkBalance(t) + "\n");       
                if(t.left != null) {
                    System.out.print("      Left:  Data: " + t.left.element);
                    System.out.print("\tHeight: " + t.left.height);
                    System.out.print("   Balance: " + checkBalance(t.left) + "\n");
                }           
                else {
                    System.out.print("      Left:  " + t.left + "\n");                
                }                
                if(t.right != null) {
                    System.out.print("      Right: Data: " + t.right.element);
                    System.out.print("\tHeight: " + t.right.height);
                    System.out.print("   Balance: " + checkBalance(t.right) + "\n");
                }           
                else {
                    System.out.print("      Right: " + t.right + "\n");                
                }
                if(t.dupArr.size() > 0) {                    
                    System.out.println("      Duplicate data occurrence: " + 
                            t.dupArr.size() + " " + t.dupArr + "\n");
                }

                    printBalTree( t.right , x );
            }
        }
        else {
            if(t != null) {
                printBalTree(t.right, x);
                System.out.print( "\nData: " + t.element );
                System.out.print("      Height: " + t.height);
                System.out.print("   Balance: " + checkBalance(t) + "\n");
                if(t.left != null) {
                    System.out.print("      Left:  Data: " + t.left.element);
                    System.out.print("\t Height: " + t.left.height);
                    System.out.print("   Balance: " + checkBalance(t.left) + "\n");
                }         
                else {
                    System.out.print("      Left:  " + t.left + "\n");                                    
                }
                if(t.right != null) {
                    System.out.print("      Right: Data: " + t.right.element);
                    System.out.print("\t Height: " + t.right.height);
                    System.out.print("   Balance: " + checkBalance(t.right) + "\n");
                }                                      
                          
                else {
                    System.out.print("      Right: " + t.right + "\n");                
                }
                if(t.dupArr.size() > 0) {
                    System.out.println("      Duplicate data occurrence: " + 
                            t.dupArr.size() + " " + t.dupArr + "\n");
                }
                
                printBalTree( t.left , x );
            }            
        }                   
    }
    
    private void writeBalTree(A1233CSAVLNode<AnyType> t, boolean x, 
            Writer in) throws IOException {  
          
        if(x) {
            if( t != null ) {  
                writeBalTree( t.left , x, in);            
                in.write( "\n      Data: " + t.element );
                in.write("      Height: " + t.height);
                in.write("    Balance: " + checkBalance(t) + "\n");       
                if(t.left != null) {
                    in.write("            Left:  Data: " + t.left.element);
                    in.write("\tHeight: " + t.left.height);
                    in.write("   Balance: " + checkBalance(t.left) + "\n");
                }           
                else {
                    in.write("            Left:  " + t.left + "\n");                
                }                
                if(t.right != null) {
                    in.write("            Right: Data: " + t.right.element);
                    in.write("\tHeight: " + t.right.height);
                    in.write("   Balance: " + checkBalance(t.right) + "\n");
                }           
                else {
                    in.write("            Right: " + t.right + "\n");                
                }
                if(t.dupArr.size() > 0) {                    
                    in.write("            Duplicate data occurrence: " + 
                            t.dupArr.size() + " " + t.dupArr + "\n");
                }                
                writeBalTree( t.right , x, in);
            }
        }
        else {
            if(t != null) {   
                writeBalTree(t.right, x, in);
                in.write( "\n      Data: " + t.element );
                in.write("      Height: " + t.height);
                in.write("    Balance: " + checkBalance(t) + "\n");
                if(t.left != null) {
                    in.write("            Left:  Data: " + t.left.element);
                    in.write("\tHeight: " + t.left.height);
                    in.write("   Balance: " + checkBalance(t.left) + "\n");
                }            
                else {
                    in.write("            Left:  " + t.left + "\n");
                                    
                }
                if(t.right != null) {
                    in.write("            Right: Data: " + t.right.element);
                    in.write("\tHeight: " + t.right.height);
                    in.write("   Balance: " + checkBalance(t.right) + "\n");
                }                                      
                       
                else {
                    in.write("            Right: " + t.right + "\n");               
                }
                if(t.dupArr.size() > 0) {
                    in.write("            Duplicate data occurrence: " + 
                            t.dupArr.size() + " " + t.dupArr + "\n");
                }                
                
                writeBalTree( t.left , x , in);
            }            
        }            
    }
    
    public Result <AnyType> findMode() {
        A1233CSAVLNode<AnyType> mode = null;
        A1233CSAVLNode<AnyType> current = root;
        int count = 0;        
        Stack stack = new Stack();
                
        while(current != null || !stack.isEmpty()) {
            if(current != null) {               
                stack.push(current);
                current = current.left;                
            }
            else if(!stack.isEmpty()) {
             current = (A1233CSAVLNode<AnyType>) stack.pop();
             if(current.dupArr.size() > count && current.isActive){      
                 mode = current;
                 count = current.dupArr.size();
                 
            }
             current = current.right;
            }
            
        }
        if(mode == null) {
            throw new NoSuchElementException("No mode!");
        }
        
        return new MyResult(mode.element, mode.dupArr.size());
                        
    }
       
    private class MyResult <AnyType> implements Result {
        private AnyType mode;
        private int count;
        
        public MyResult( AnyType theMode, int theCount) {
            mode = theMode;
            count = theCount;
        }
        
        public AnyType mode() {
            return mode;
        }
        
        public int count() {
            return count;
        }
        
        public String toString() {
            return "Mode: " + mode + " Frequency: " + count;
        }
    }
    
    private A1233CSAVLNode<AnyType> balance( A1233CSAVLNode<AnyType> t ) {
        
        if( t == null )
            return t;
        
        if( height( t.left ) - height( t.right ) > ALLOWED_IMBALANCE )
            if( height( t.left.left ) >= height( t.left.right ) )
                t = rotateWithLeftChild( t );
            else
                t = doubleWithLeftChild( t );
        else
        if( height( t.right ) - height( t.left ) > ALLOWED_IMBALANCE )
            if( height( t.right.right ) >= height( t.right.left ) )
                t = rotateWithRightChild( t );
            else
                t = doubleWithRightChild( t );

        t.height = Math.max( height( t.left ), height( t.right ) ) + 1;
        return t;
    }
    
    public void checkBalance( ) {
        
        checkBalance( root );
    }
    
    private int checkBalance( A1233CSAVLNode<AnyType> t ) {
        
        if( t == null )
            return -1;
        
        if( t != null )
        {
            int hl = checkBalance( t.left );
            int hr = checkBalance( t.right );
            if( Math.abs( height( t.left ) - height( t.right ) ) > 1 ||
                    height( t.left ) != hl || height( t.right ) != hr )
                System.out.println( "OOPS!!" );
        }
        
        return height( t );
    }
    
    private A1233CSAVLNode<AnyType> insert( AnyType x, A1233CSAVLNode<AnyType> t ) {     
        
        if( t == null )
            return new A1233CSAVLNode<>( x, null, null, true, 
                    new ArrayList<AnyType>());
        
        int compareResult = x.compareTo( t.element );
        
        if( compareResult < 0 )
            t.left = insert( x, t.left );
        else if( compareResult > 0 )
            t.right = insert( x, t.right );
        else {            
            t.dupArr.add(x);
                      
        }
        return balance( t );
    }
   
    private A1233CSAVLNode<AnyType> findMin( A1233CSAVLNode<AnyType> t) {
        Stack stack = new Stack();
        stack.push(t);
        
        while(t != null || !stack.isEmpty()) {
            if(t != null) {               
                stack.push(t);
                t = t.left;                
            }
            else if(!stack.isEmpty()) {
             t = (A1233CSAVLNode<AnyType>) stack.pop();
             if(t.isActive){
                 return t;
             }
             t = t.right;
            }                      
        } 
        if(t == null) {
            throw new NoSuchElementException("The whole tree is lazy deleted.");
        }
        return t;                   
    }

    private A1233CSAVLNode<AnyType> findMax( A1233CSAVLNode<AnyType> t ) {
        
        Stack stack = new Stack();
        stack.push(t);
        
        while(t != null || !stack.isEmpty()) {
            if(t != null) {               
                stack.push(t);
                t = t.right;                
            }
            else if(!stack.isEmpty()) {
             t = (A1233CSAVLNode<AnyType>) stack.pop();
             if(t.isActive){
                 return t;
             }
             t = t.left;
            }           
        }
        if(t == null) {
            throw new NoSuchElementException("The whole tree is lazy deleted.");
        }
        return t;       
    }
               
    private boolean contains( AnyType x, A1233CSAVLNode<AnyType> t ) {
        
        while( t != null )
        {
            int compareResult = x.compareTo( t.element );
            
            if( compareResult < 0 )
                t = t.left;
            else if( compareResult > 0 )
                t = t.right;
            else
                if(t.isActive){
                    return true;  // Match
                }
                else {
                    return false; //Item has be lazy deleted
                }                    
        }
        return false;   // No match
    }

    private void printTree( A1233CSAVLNode<AnyType> t ) {
        
        if( t != null )
        {           
            printTree( t.left );
            if(t.isActive){
                System.out.println( t.element );
            }            
            printTree( t.right );
           
        }
    }

    private int height( A1233CSAVLNode<AnyType> t ) {
        
        return t == null ? -1 : t.height;
    }

    private A1233CSAVLNode<AnyType> rotateWithLeftChild( A1233CSAVLNode<AnyType> k2 ) {
        
        A1233CSAVLNode<AnyType> k1 = k2.left;
        k2.left = k1.right;
        k1.right = k2;
        k2.height = Math.max( height( k2.left ), height( k2.right ) ) + 1;
        k1.height = Math.max( height( k1.left ), k2.height ) + 1;
        return k1;
    }

    private A1233CSAVLNode<AnyType> rotateWithRightChild( A1233CSAVLNode<AnyType> k1 ) {
        
        A1233CSAVLNode<AnyType> k2 = k1.right;
        k1.right = k2.left;
        k2.left = k1;
        k1.height = Math.max( height( k1.left ), height( k1.right ) ) + 1;
        k2.height = Math.max( height( k2.right ), k1.height ) + 1;
        return k2;
    }

    private A1233CSAVLNode<AnyType> doubleWithLeftChild( A1233CSAVLNode<AnyType> k3 ) {
        
        k3.left = rotateWithRightChild( k3.left );
        return rotateWithLeftChild( k3 );
    }

    private A1233CSAVLNode<AnyType> doubleWithRightChild( A1233CSAVLNode<AnyType> k1 ) {
        
        k1.right = rotateWithLeftChild( k1.right );
        return rotateWithRightChild( k1 );
    }

    private static class A1233CSAVLNode<AnyType extends Comparable<? super AnyType>> {
        
        AnyType element;                        // The data in the node
        A1233CSAVLNode<AnyType>  left;         // Left child
        A1233CSAVLNode<AnyType>  right;        // Right child
        int height;                             // Height
        boolean isActive;                       //flag for deletion
        ArrayList<AnyType> dupArr;              //Array for duplicates
        
            // Constructors
        A1233CSAVLNode( AnyType theElement ) {
            
            this( theElement, null, null, true, new ArrayList<AnyType>());
        }

        A1233CSAVLNode( AnyType theElement, A1233CSAVLNode<AnyType> 
                lt, A1233CSAVLNode<AnyType> rt, boolean active, 
                ArrayList<AnyType> aL) {
            
            element  = theElement;
            left     = lt;
            right    = rt;
            height   = 0;
            isActive = active;
            dupArr = aL;
            
        }        
    }    
}
